server:
  port: 8015

eureka:
  instance:
    hostname: localhost
    port: 8761
    prefer-ip-address: true # 表示：将自己的ip注册到eureka
    instance-id: ${eureka.instance.hostname}:${server.port} # 以[IP地址:端口号]作为注册地址
    # 表示eureka client间隔多久去拉取服务注册信息，默认为30秒，如果要迅速获取服务注册状态，可以缩小该值
    lease-renewal-interval-in-seconds: 5
    # 表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance。
    # 默认为90秒
    # 如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
    # 如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
    # 该值至少应该大于 leaseRenewalIntervalInSeconds
    lease-expiration-duration-in-seconds: 10

  client:
    registry-fetch-interval-seconds: 5 #新服务上线拉取eureka server服务注册信息频率，默认是30秒
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${eureka.instance.port}/eureka/

feign:
  hystrix:
    enabled: true

hystrix:
  shareSecurityContext: true
  command:
    default:
      circuitBreaker:
        sleepWindowInMilliseconds: 5000 # 熔断多少秒后去尝试恢复请求，默认5000ms
        forceClosed: true
      execution:
        timeout:
          enabled: true #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
        isolation:
          thread:
            timeoutInMilliseconds: 8000 # 熔断器超时时间：默认1000ms

# timeout.enabled=true时，# hystrix的超时时间要大于
# 当MaxAutoRetries=1, MaxAutoRetriesNextServer=2时: RetryCount = (1+1) * (2+1) = 6次
# 当MaxAutoRetries=0, MaxAutoRetriesNextServer=1时: RetryCount = (0+1) * (1+1) = 2次
# 也就是: timeoutInMilliseconds = (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1) * ReadTimeout


# https://blog.csdn.net/zzzgd_666/article/details/83314833

ribbon:
  ReadTimeout: 2000               # 请求处理的超时时间
  ConnectTimeout: 1000            # 请求连接的超时时间
  MaxAutoRetries: 1               # 重试策略先尝试访问首选实例一次,失败后才会更换实例访问
  MaxAutoRetriesNextServer: 1     # 更换实例访问的次数：通过参数设置为2, 所以会尝试更换2次实例进行重试
  OkToRetryOnAllOperations: true  # 开启对请求进行行重试


spring:
  application:
    name: xincan-transaction-system

  cloud:
    alibaba:
      seata:
        # 配置分布式事务的分组名称
        tx-service-group: raw-jdbc-group

  datasource:
    name: main-datasource
    druid:
      url: jdbc:mysql://192.168.1.186:3306/xincan-transaction?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&serverTimezone=GMT
      username: root
      password: 123456
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      # 配置监控界面
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: /druid/*,*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico
        session-stat-enable: true
        session-stat-max-count: 10
        principal-session-name: session_name
        principal-cookie-name: cookie_name
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        login-username: xincan
        login-password: xincan-0818
        allow: 127.0.0.1,192.168.1.82
        deny: 192.168.1.81
      aop-patterns: com.xincan.transaction.system.server.*.*.*.*


mybatis-plus:
  mapper-locations: classpath:mapper/**/*.xml
  # 以下配置均有默认值,可以不设置
  global-config:
    db-config:
      #主键类 * AUTO: 数据库ID自增; INPUT: 用户输入ID; ID_WORKER: 全局唯一ID, Long类型的主键; ID_WORKER_STR: 字符串全局唯一ID; UUID: 全局唯一ID，UUID类型的主键; NONE: 该类型为未设置主键类型
      id-type: UUID
      #字段策略 IGNORED:"忽略判断"  NOT_NULL:"非 NULL 判断")  NOT_EMPTY:"非空判断"
      field-strategy: NOT_EMPTY
      #数据库类型
      db-type: MYSQL
  configuration:
    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
    map-underscore-to-camel-case: true
    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: false
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 鉴权配置
security:
  oauth2:
    client:
      clientId: ${spring.application.name}
      clientSecret: 123456
      user-authorization-uri: http://localhost:8070/oauth/authorize   # 获取code
      access-token-uri: http://localhost:8070/oauth/token             # 获取token
      grant-type: client_credentials,refresh_token,password
      scope: server
    resource:
      id: xincan-transaction-oauth #鉴权服务clientId
      token-info-uri: http://localhost:8070/oauth/check_token
      user-info-uri: http://localhost:8070/hatech/principal           # 根据Token获取用户信息
    authorization:
      check-token-access: http://localhost:8070/oauth/check_token

logging:
  level:
    com.xincan.transaction: debug
  file: ./log/${spring.application.name}/${spring.application.name}.log

